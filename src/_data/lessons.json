{
  "lessons": [
    {
      "id": "lesson1",
      "title": "Lesson 1: Introduction to OS Development",
      "content": "Welcome to the first lesson. You will start by learning a few estils about the pc. The few major things you will need to know are about the cpu, the bios, the ram and the storage drive."
    },
    {
      "id": "lesson2",
      "title": "Lesson 2: Knowing the boot process",
      "content": "In this lesson, you will learn the typical boot process of an x86 system."
    },
    {
      "id": "lesson3",
      "title": "Lesson 3: Knowing the boot process",
      "content": "In this lesson, you will learn the typical boot process of an x86 system."
    },
    {
      "id": "lesson4",
      "title": "Lesson 4: Knowing the boot process",
      "content": "In this lesson, you will learn the typical boot process of an x86 system."
    },
    {
      "id": "lesson5",
      "title": "Lesson 2: Writing a Simple Bootloader",
      "content": "Step 1: Understanding Assembly Basics\n\nLet's start with some basic assembly instructions. Here's a simple bootloader with detailed comments explaining each term:",
      "exampleCode": "[org 0x7c00] ; Set the origin to 0x7c00, which is where the BIOS loads the boot sector\n\n; Clear the screen\nmov ah, 0x00 ; mov: move data, ah: upper 8 bits of the AX register, 0x00: video mode 0\nmov al, 0x03 ; al: lower 8 bits of the AX register, 0x03: clear screen and move cursor to upper left\nint 0x10     ; int: interrupt, 0x10: BIOS video service\n\n; Print \"Hello, OS!\"\nmov si, msg  ; mov: move data, si: source index register, msg: address of the message\ncall print_string ; call: call a subroutine, print_string: the subroutine to print a string\n\n; Infinite loop to keep the OS running\nhang:\n    jmp hang ; jmp: jump to a label, hang: the label to jump to\n\n; Function to print a string\nprint_string:\n    mov ah, 0x0E ; mov: move data, ah: upper 8 bits of the AX register, 0x0E: teletype output\n.repeat:\n    lodsb       ; lodsb: load string byte, load a byte from the address in si into al\n    or al, al   ; or: logical OR, al: the byte just loaded, this checks if it's the null terminator\n    jz .done    ; jz: jump if zero, .done: the label to jump to if al is zero (end of string)\n    int 0x10    ; int: interrupt, 0x10: BIOS video service to print the character in al\n    jmp .repeat ; jmp: jump to a label, .repeat: the label to jump to\n.done:\n    ret         ; ret: return from subroutine\n\nmsg db 'Hello, OS!', 0 ; db: define byte, 'Hello, OS!': the message to print, 0: null terminator\n\ntimes 510-($-$$) db 0  ; Fill the rest of the boot sector with zeros\ndw 0xAA55              ; Boot sector signature\n"
    },
    {
      "id": "lesson6",
      "title": "Lesson 3: Displaying a Character on Screen",
      "content": "Step 1: Update Bootloader to Display a Character\n\nLet's enhance your bootloader to display a single character on the screen. We'll use BIOS interrupts to handle this.",
      "exampleCode": "[org 0x7c00] ; Set the origin to 0x7c00, which is where the BIOS loads the boot sector\n\n; Clear the screen\nmov ah, 0x00 ; mov: move data, ah: upper 8 bits of the AX register, 0x00: video mode 0 (clear screen)\nmov al, 0x03 ; al: lower 8 bits of the AX register, 0x03: clear screen and move cursor to upper left\nint 0x10     ; int: interrupt, 0x10: BIOS video service\n\n; Print a single character 'A'\nmov ah, 0x0E ; mov: move data, ah: upper 8 bits of the AX register, 0x0E: teletype output\nmov al, 'A'  ; al: lower 8 bits of the AX register, 'A': ASCII code for character 'A'\nint 0x10     ; int: interrupt, 0x10: BIOS video service\n\n; Infinite loop to keep the OS running\nhang:\n    jmp hang ; jmp: jump to a label, hang: the label to jump to\n\ntimes 510-($-$$) db 0  ; Fill the rest of the boot sector with zeros\ndw 0xAA55              ; Boot sector signature\n"
    },
    {
      "id": "lesson7",
      "title": "Lesson 4: Displaying a String on Screen",
      "content": "Step 1: Update Bootloader to Display a String\n\nNow, let's display a string instead of just a single character.",
      "exampleCode": "[org 0x7c00] ; Set the origin to 0x7c00, which is where the BIOS loads the boot sector\n\n; Clear the screen\nmov ah, 0x00 ; mov: move data, ah: upper 8 bits of the AX register, 0x00: video mode 0 (clear screen)\nmov al, 0x03 ; al: lower 8 bits of the AX register, 0x03: clear screen and move cursor to upper left\nint 0x10     ; int: interrupt, 0x10: BIOS video service\n\n; Print \"Hello, OS!\"\nmov si, msg  ; mov: move data, si: source index register, msg: address of the message\ncall print_string ; call: call a subroutine, print_string: the subroutine to print a string\n\n; Infinite loop to keep the OS running\nhang:\n    jmp hang ; jmp: jump to a label, hang: the label to jump to\n\n; Function to print a string\nprint_string:\n    mov ah, 0x0E ; mov: move data, ah: upper 8 bits of the AX register, 0x0E: teletype output\n.repeat:\n    lodsb       ; lodsb: load string byte, load a byte from the address in si into al\n    or al, al   ; or: logical OR, al: the byte just loaded, this checks if it's the null terminator\n    jz .done    ; jz: jump if zero, .done: the label to jump to if al is zero (end of string)\n    int 0x10    ; int: interrupt, 0x10: BIOS video service to print the character in al\n    jmp .repeat ; jmp: jump to a label, .repeat: the label to jump to\n.done:\n    ret         ; ret: return from subroutine\n\nmsg db 'Hello, OS!', 0 ; db: define byte, 'Hello, OS!': the message to print, 0: null terminator\n\ntimes 510-($-$$) db 0  ; Fill the rest of the boot sector with zeros\ndw 0xAA55              ; Boot sector signature\n"
    },
    {
      "id": "lesson8",
      "title": "Lesson 5: Adding More Functionality",
      "content": "In this lesson, we'll learn how to handle basic keyboard input.\nStep 1: Update Bootloader to Wait for Key Press\n\nWe'll modify the bootloader to wait for a key press and then display the pressed key.",
      "exampleCode": "[org 0x7c00] ; Set the origin to 0x7c00, which is where the BIOS loads the boot sector\n\n; Clear the screen\nmov ah, 0x00 ; mov: move data, ah: upper 8 bits of the AX register, 0x00: video mode 0 (clear screen)\nmov al, 0x03 ; al: lower 8 bits of the AX register, 0x03: clear screen and move cursor to upper left\nint 0x10     ; int: interrupt, 0x10: BIOS video service\n\n; Print \"Press a key:\"\nmov si, msg  ; mov: move data, si: source index register, msg: address of the message\ncall print_string ; call: call a subroutine, print_string: the subroutine to print a string\n\n; Wait for a key press\nxor ah, ah   ; xor: exclusive OR, ah: clear the register\nint 0x16     ; int: interrupt, 0x16: BIOS keyboard service\n\n; Print the pressed key\nmov ah, 0x0E ; mov: move data, ah: upper 8 bits of the AX register, 0x0E: teletype output\nint 0x10     ; int: interrupt, 0x10: BIOS video service\n\n; Infinite loop to keep the OS running\nhang:\n    jmp hang ; jmp: jump to a label, hang: the label to jump to\n\nprint_string:\n    mov ah, 0x0E ; mov: move data, ah: upper 8 bits of the AX register, 0x0E: teletype output\n.repeat:\n    lodsb       ; lodsb: load string byte, load a byte from the address in si into al\n    or al, al   ; or: logical OR, al: the byte just loaded, this checks if it's the null terminator\n    jz .done    ; jz: jump if zero, .done: the label to jump to if al is zero (end of string)\n    int 0x10    ; int: interrupt, 0x10: BIOS video service to print the character in al\n    jmp .repeat ; jmp: jump to a label, .repeat: the label to jump to\n.done:\n    ret         ; ret: return from subroutine\n\nmsg db 'Press a key:', 0 ; db: define byte, 'Press a key!': the message to print, 0: null terminator\n\ntimes 510-($-$$) db 0  ; Fill the rest of the boot sector with zeros\ndw 0xAA55              ; Boot sector signature\n"
    },
    {
      "id": "lesson9",
      "title": "Lesson 6: Understanding Memory Segmentation",
      "content": "Step 1: Basic Concepts of Memory Segmentation\n\nIn x86 architecture, memory is divided into segments. Each segment can hold up to 64KB of data. Segmentation allows the CPU to access more memory than what a 16-bit address can directly address (64KB).\n\n    Segment Registers: These registers hold the addresses of segments.\n        CS (Code Segment): Holds the address of the code segment.\n        DS (Data Segment): Holds the address of the data segment.\n        SS (Stack Segment): Holds the address of the stack segment.\n        ES, FS, GS: Additional segment registers.\n\nStep 2: Displaying Memory Segment Values\n\nLet's update the bootloader to display the values of segment registers.",
      "exampleCode": "[org 0x7c00]\n\n; Clear the screen\nmov ah, 0x00\nmov al, 0x03\nint 0x10\n\n; Print segment register values\nmov ax, cs\ncall print_hex\nmov ax, ds\ncall print_hex\nmov ax, ss\ncall print_hex\nmov ax, es\ncall print_hex\n\n; Infinite loop to keep the OS running\nhang:\n    jmp hang\n\nprint_hex:\n    pusha          ; Save all general-purpose registers\n    mov cx, 4      ; We will print 4 hex digits\n    mov bx, 0xF000 ; Mask for extracting hex digits\n.next_digit:\n    rol ax, 4      ; Rotate left 4 bits\n    push ax        ; Save ax\n    and al, 0x0F   ; Isolate the lower 4 bits\n    cmp al, 10\n    jl .digit_ok\n    add al, 'A' - 10\n    jmp .digit_done\n.digit_ok:\n    add al, '0'\n.digit_done:\n    mov ah, 0x0E\n    int 0x10       ; Print character in al\n    pop ax         ; Restore ax\n    loop .next_digit\n    popa           ; Restore all general-purpose registers\n    ret            ; Return to caller\n\ntimes 510-($-$$) db 0\ndw 0xAA55\n"
    },
    {
      "id": "lesson10",
      "title": "Lesson 7: Switching to 32-bit Protected Mode",
      "content": "Step 1: Setting Up Global Descriptor Table (GDT)\n\nTo switch to 32-bit protected mode, we need to set up the GDT, which defines the memory segments for the CPU.",
      "exampleCode": "[org 0x7c00]\n\n; Global Descriptor Table (GDT)\ngdt_start:\n    ; Null Descriptor\n    dq 0x0000000000000000\n    ; Code Segment Descriptor\n    dq 0x00CF9A000000FFFF\n    ; Data Segment Descriptor\n    dq 0x00CF92000000FFFF\ngdt_end:\n\ngdt_ptr:\n    dw gdt_end - gdt_start - 1 ; Limit\n    dd gdt_start               ; Base\n\n; Clear the screen\nmov ah, 0x00\nmov al, 0x03\nint 0x10\n\n; Load GDT\nlgdt [gdt_ptr]\n\n; Enable A20 line\ncall enable_a20\n\n; Switch to protected mode\ncli                      ; Clear interrupts\nmov eax, cr0\nor eax, 1                ; Set PE bit (Protection Enable)\nmov cr0, eax\njmp 0x08:protected_mode  ; Far jump to flush the prefetch queue\n\nenable_a20:\n    in al, 0x64\n    or al, 0x02\n    out 0x64, al\n    ret\n\nprotected_mode:\n    mov ax, 0x10         ; Data segment selector\n    mov ds, ax\n    mov es, ax\n    mov fs, ax\n    mov gs, ax\n    mov ss, ax\n    mov esp, 0x90000     ; Set stack pointer\n\n    ; Print a message\n    mov si, msg\n    call print_string\n\n    ; Infinite loop to keep the OS running\n    jmp $\n\nprint_string:\n    mov ah, 0x0E\n.repeat:\n    lodsb\n    or al, al\n    jz .done\n    int 0x10\n    jmp .repeat\n.done:\n    ret\n\nmsg db 'Entered 32-bit Protected Mode!', 0\n\ntimes 510-($-$$) db 0\ndw 0xAA55\n"
    },
    {
      "id": "lesson11",
      "title": "Lesson 8: Understanding Protected Mode",
      "content": "Step 1: Concepts of Protected Mode\n\nProtected mode allows the CPU to access more memory and provides advanced features like virtual memory, paging, and safe multi-tasking.\n\n    GDT: The Global Descriptor Table defines the properties of memory segments.\n    Descriptors: Entries in the GDT that define base address, limit, and access rights of memory segments.",
      "exampleCode": null
    },
    {
      "id": "lesson12",
      "title": "Lesson 9: Setting Up a Simple Kernel",
      "content": "Step 1: Create a Kernel Entry Point\n\nLet's create a simple kernel entry point in assembly. This will be the starting point of our kernel after switching to protected mode.\n\nCreate a file called kernel.asm in the kernel directory:",
      "exampleCode": "[bits 32]\nsection .text\nglobal start\n\nstart:\n    ; Print a message\n    mov si, msg\n    call print_string\n\n    ; Infinite loop to keep the kernel running\n    hlt\n    jmp $\n\nprint_string:\n    mov ah, 0x0E\n.repeat:\n    lodsb\n    or al, al\n    jz .done\n    int 0x10\n    jmp .repeat\n.done:\n    ret\n\nmsg db 'Hello from Kernel!', 0\n"
    },
    {
      "id": "lesson13",
      "title": "Lesson 10: Loading the Kernel",
      "content": "Step 1: Update the Bootloader to Load the Kernel\n\nWe'll modify our bootloader to load the kernel into memory and jump to it.",
      "exampleCode": "[org 0x7c00]\n\n; Global Descriptor Table (GDT)\ngdt_start:\n    ; Null Descriptor\n    dq 0x0000000000000000\n    ; Code Segment Descriptor\n    dq 0x00CF9A000000FFFF\n    ; Data Segment Descriptor\n    dq 0x00CF92000000FFFF\ngdt_end:\n\ngdt_ptr:\n    dw gdt_end - gdt_start - 1 ; Limit\n    dd gdt_start               ; Base\n\n; Clear the screen\nmov ah, 0x00\nmov al, 0x03\nint 0x10\n\n; Load GDT\nlgdt [gdt_ptr]\n\n; Enable A20 line\ncall enable_a20\n\n; Switch to protected mode\ncli                      ; Clear interrupts\nmov eax, cr0\nor eax, 1                ; Set PE bit (Protection Enable)\nmov cr0, eax\njmp 0x08:protected_mode  ; Far jump to flush the prefetch queue\n\nenable_a20:\n    in al, 0x64\n    or al, 0x02\n    out 0x64, al\n    ret\n\nprotected_mode:\n    mov ax, 0x10         ; Data segment selector\n    mov ds, ax\n    mov es, ax\n    mov fs, ax\n    mov gs, ax\n    mov ss, ax\n    mov esp, 0x90000     ; Set stack pointer\n\n    ; Load the kernel (assuming it is located at sector 2)\n    mov eax, 0x2000      ; Kernel load address\n    mov ebx, 2           ; Starting sector (sector 2)\n    call load_kernel\n\n    ; Jump to the kernel entry point\n    jmp 0x08:0x2000\n\nload_kernel:\n    ; Read sectors into memory at address in eax\n    pusha\n    mov edx, eax\n    mov ecx, 1           ; Number of sectors to read\n    mov ebx, 2           ; Starting sector\n.read_sector:\n    ; Read sector\n    mov ah, 0x02         ; BIOS read sector function\n    mov al, cl           ; Number of sectors to read\n    mov ch, 0x00         ; Track number (cylinder)\n    mov cl, 0x02         ; Starting sector\n    mov dh, 0x00         ; Head number\n    mov dl, 0x80         ; Drive number (first hard drive)\n    int 0x13             ; BIOS disk service\n    jc .error            ; Jump if carry flag is set (error)\n    add edx, 512         ; Move to the next sector in memory\n    dec ecx              ; Decrement sector counter\n    jnz .read_sector     ; If more sectors to read, loop\n.error:\n    popa\n    ret\n\ntimes 510-($-$$) db 0\ndw 0xAA55\n"
    },
    {
      "id": "lesson14",
      "title": "Lesson 11: Writing a Kernel in C",
      "content": "Step 1: Create a Simple Kernel in C\n\nLet's write a simple kernel in C that prints a message to the screen. Create a file called kernel.c in the kernel directory:",
      "exampleCode": "void kmain(void) {\n    const char *str = \"Hello from Kernel!\";\n    char *vidptr = (char*)0xb8000;  // Video memory starts here\n    unsigned int i = 0;\n    unsigned int j = 0;\n\n    // Clear the screen by writing spaces to video memory\n    while(j < 80 * 25 * 2) {\n        vidptr[j] = ' ';\n        vidptr[j+1] = 0x07;  // Attribute byte - light grey on black background\n        j = j + 2;\n    }\n\n    j = 0;\n\n    // Write the string to video memory\n    while(str[j] != '\\0') {\n        vidptr[i] = str[j];\n        vidptr[i+1] = 0x07;  // Attribute byte - light grey on black background\n        ++j;\n        i = i + 2;\n    }\n\n    return;\n}\n"
    },
    {
      "id": "lesson15",
      "title": "Lesson 12: Combining Bootloader and Kernel",
      "content": "Step 1: Combine Bootloader and Kernel into a Disk Image\n\nWe'll combine the bootloader and kernel into a single disk image.",
      "exampleCode": "cat boot/boot.bin kernel/kernel.bin > os-image.bin\n\nqemu-system-x86_64 -drive format=raw,file=os-image.bin\n"
    },
    {
      "id": "lesson16",
      "title": "Lesson 13: Writing a Kernel in Pure Assembly",
      "content": "Step 1: Create a Pure Assembly Kernel\n\nWe'll write a simple kernel in assembly that prints \"Hello from Kernel!\" to the screen.\n\nCreate a file called kernel.asm in the kernel directory:",
      "exampleCode": "[bits 32]\nsection .text\nglobal start\n\nstart:\n    ; Print a message\n    mov esi, msg\n    call print_string\n\n    ; Infinite loop to keep the kernel running\n    hlt\n    jmp $\n\nprint_string:\n    mov ebp, 0xb8000     ; Video memory address\n    mov ebx, 0           ; Index\n.next_char:\n    lodsb                ; Load byte at address [esi] into AL\n    or al, al            ; Check if the byte is 0 (end of string)\n    jz .done             ; If zero, we are done\n    mov [ebp + ebx], al  ; Write character to video memory\n    mov byte [ebp + ebx + 1], 0x07 ; Write attribute byte (light grey on black background)\n    add ebx, 2           ; Move to the next character position\n    jmp .next_char       ; Repeat for next character\n.done:\n    ret                  ; Return from subroutine\n\nmsg db 'Hello from Kernel!', 0\n"
    }
  ]
}